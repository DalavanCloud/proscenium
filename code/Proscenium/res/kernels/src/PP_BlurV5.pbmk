<languageVersion: 1.0;>
material kernel PP_BlurV5
<
	namespace:	"Pixel Bender 3D";
	vendor:		"Adobe";
	version:	1;
>
{
// ================================================================================
// Copyright 2012 Adobe Systems
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ================================================================================

	///////////////////////////////////////////////////////////////////////////
	parameter    float4 size;  		  // xy = 1/wh, zw=wh
	parameter    float4 sizeHalf4th;  // xy = 1/wh/2,  zw = 1/wh/4

	input        image4 sourceImage;
	interpolated float4 voutUV;

	parameter    float4 uvScale;   
	parameter    float4 uvOffset;
	input vertex float2 viewportUV  < id:"texcoord"; >;
	void evaluateVertex()	{ voutUV = viewportUV.xyxy * uvScale + uvOffset; }
	///////////////////////////////////////////////////////////////////////////

	// 5x1 kernel:   [1 4 6 4 1] / 16	
	
	output float4 outputColor;
	void evaluateFragment()
	{
		float2 uv = voutUV.xy;
		uv.y = uv.y - size.y;
		uv.y = uv.y - size.y;

		float4 color1 = sample(sourceImage, uv.xy, PB3D_NEAREST | PB3D_MIPDISABLE ); 
		uv.y = uv.y + size.y;
		float4 color2 = sample(sourceImage, uv.xy, PB3D_NEAREST | PB3D_MIPDISABLE ); 
		uv.y = uv.y + size.y;
		float4 color3 = sample(sourceImage, uv.xy, PB3D_NEAREST | PB3D_MIPDISABLE ); 
		uv.y = uv.y + size.y;
		float4 color4 = sample(sourceImage, uv.xy, PB3D_NEAREST | PB3D_MIPDISABLE ); 
		uv.y = uv.y + size.y;
		float4 color5 = sample(sourceImage, uv.xy, PB3D_NEAREST | PB3D_MIPDISABLE ); 

		outputColor = (color1 + color5) * (1./16.)
					+ (color2 + color4) * (4./16.)
					+ (color3         ) * (6./16.);
	}
}
